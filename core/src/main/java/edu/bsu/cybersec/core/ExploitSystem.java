/*
 * Copyright 2015 Paul Gestwicki
 *
 * This file is part of The Social Startup Game
 *
 * The Social Startup Game is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Social Startup Game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Social Startup Game.  If not, see <http://www.gnu.org/licenses/>.
 */

package edu.bsu.cybersec.core;

import react.ValueView;
import tripleplay.entity.Entity;

import java.util.Random;

import static com.google.common.base.Preconditions.checkNotNull;

public class ExploitSystem extends tripleplay.entity.System {
    private final GameWorld world;
    private final Random random = new Random();

    private int nextExploitNumber = 0;
    private int secondsBetweenChecks = ClockUtils.SECONDS_PER_HOUR;
    private int nextCheck = secondsBetweenChecks;


    public ExploitSystem(GameWorld world) {
        super(world, SystemPriority.MODEL_LEVEL.value);
        this.world = checkNotNull(world);
        this.world.gameTime.connect(new ValueView.Listener<GameTime>() {
            @Override
            public void onChange(GameTime value, GameTime oldValue) {
                if (value.now >= nextCheck) {
                    runPotentialExploit();
                    nextCheck = value.now + secondsBetweenChecks;
                }
            }
        });
    }

    private void runPotentialExploit() {
        if (random.nextFloat() < world.exposure.get()) {
            createExploit();
        }
    }

    private void createExploit() {
        Entity exploit = world.create(true).add(world.exploitNumber);
        world.exploitNumber.set(exploit.id, nextExploitNumber++);
    }


    @Override
    protected boolean isInterested(Entity entity) {
        return false;
    }
}
