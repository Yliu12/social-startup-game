/*
 * Copyright 2015 Paul Gestwicki
 *
 * This file is part of The Social Startup Game
 *
 * The Social Startup Game is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Social Startup Game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Social Startup Game.  If not, see <http://www.gnu.org/licenses/>.
 */

package edu.bsu.cybersec.core.systems;

import edu.bsu.cybersec.core.ClockUtils;
import edu.bsu.cybersec.core.GameWorld;
import edu.bsu.cybersec.core.SystemPriority;
import edu.bsu.cybersec.core.TaskFlags;
import playn.core.Clock;
import tripleplay.entity.Entity;
import tripleplay.entity.System;

import static com.google.common.base.Preconditions.checkNotNull;

public class ExploitMaintenanceSystem extends System {

    public static final float DEFAULT_PROGRESS_PER_HOUR_PER_MAINTENANCE_SKILL_POINT = .01f;

    private final GameWorld world;

    public ExploitMaintenanceSystem(GameWorld world) {
        super(world, SystemPriority.MODEL_LEVEL.value);
        this.world = checkNotNull(world);
    }

    @Override
    protected boolean isInterested(Entity entity) {
        return entity.has(world.task) || entity.has(world.maintenanceProgress);
    }

    @Override
    protected void update(Clock clock, Entities entities) {
        float totalMaintenance = computeMaintenanceSum(entities);
        Entity entity = findMaxProgressExploit(entities);
        if (entity != null) {
            float newProgress = world.maintenanceProgress.get(entity.id) +
                    totalMaintenance * DEFAULT_PROGRESS_PER_HOUR_PER_MAINTENANCE_SKILL_POINT *
                            ((float) world.gameTime.get().delta() / ClockUtils.SECONDS_PER_HOUR);
            float cappedNewProgress = Math.min(1f, newProgress);
            world.maintenanceProgress.set(entity.id, cappedNewProgress);
            if (cappedNewProgress >= 1f) {
                entity.remove(world.userAttrition);
            }
        }
    }

    private float computeMaintenanceSum(Entities entities) {
        float total = 0;
        for (int i = 0, limit = entities.size(); i < limit; i++) {
            int id = entities.get(i);
            if (isMaintainer(world.entity(id))) {
                total += world.maintenanceSkill.get(id);
            }
        }
        return total;
    }

    private boolean isMaintainer(Entity entity) {
        return entity.has(world.task) && TaskFlags.MAINTENANCE.isSet(world.taskFlags.get(world.task.get(entity.id)));
    }

    private Entity findMaxProgressExploit(Entities entities) {
        Entity max = null;
        for (int i = 0, limit = entities.size(); i < limit; i++) {
            final Entity entity = world.entity(entities.get(i));
            if (hasIncompleteMaintenanceProgress(entity)) {
                if (max == null
                        || world.maintenanceProgress.get(entity.id) > world.maintenanceProgress.get(max.id)) {
                    max = entity;
                }
            }
        }
        return max;
    }

    private boolean hasIncompleteMaintenanceProgress(Entity entity) {
        return entity.has(world.maintenanceProgress) && world.maintenanceProgress.get(entity.id) < 1.0f;
    }
}
