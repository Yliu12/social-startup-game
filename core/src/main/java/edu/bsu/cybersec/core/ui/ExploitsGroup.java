/*
 * Copyright 2015 Paul Gestwicki
 *
 * This file is part of The Social Startup Game
 *
 * The Social Startup Game is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Social Startup Game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Social Startup Game.  If not, see <http://www.gnu.org/licenses/>.
 */

package edu.bsu.cybersec.core.ui;

import com.google.common.collect.Sets;
import edu.bsu.cybersec.core.GameWorld;
import edu.bsu.cybersec.core.SystemPriority;
import playn.core.Clock;
import tripleplay.entity.Entity;
import tripleplay.ui.Label;
import tripleplay.ui.layout.AxisLayout;

import java.util.Comparator;
import java.util.SortedSet;

public class ExploitsGroup extends InteractionAreaGroup {

    public ExploitsGroup(final GameWorld gameWorld) {
        super(AxisLayout.vertical());
        new tripleplay.entity.System(gameWorld, SystemPriority.UI_LEVEL.value) {
            private final GameWorld world = gameWorld;

            @Override
            protected boolean isInterested(Entity entity) {
                return entity.has(world.exploitNumber);
            }

            @Override
            protected void update(Clock clock, Entities entities) {
                super.update(clock, entities);
                removeAll();
                addLabelsSortedByExploitNumber(entities);
            }

            private void addLabelsSortedByExploitNumber(Entities entities) {
                SortedSet<Integer> sortedFeatures = Sets.newTreeSet(new Comparator<Integer>() {
                    @Override
                    public int compare(Integer id1, Integer id2) {
                        return gameWorld.exploitNumber.get(id1) - gameWorld.exploitNumber.get(id2);
                    }
                });
                for (int i = 0, limit = entities.size(); i < limit; i++) {
                    sortedFeatures.add(entities.get(i));
                }
                for (Integer id : sortedFeatures) {
                    add(makeLabelFor(id));
                }
            }

            private Label makeLabelFor(int id) {
                final int number = gameWorld.exploitNumber.get(id);
                return new Label("Exploit #" + number);
            }
        };
    }
}
