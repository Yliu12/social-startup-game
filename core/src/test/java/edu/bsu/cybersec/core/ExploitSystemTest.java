/*
 * Copyright 2015 Paul Gestwicki
 *
 * This file is part of The Social Startup Game
 *
 * The Social Startup Game is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Social Startup Game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Social Startup Game.  If not, see <http://www.gnu.org/licenses/>.
 */

package edu.bsu.cybersec.core;

import org.junit.Assume;
import org.junit.Test;
import playn.core.Clock;
import tripleplay.entity.Entity;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkState;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class ExploitSystemTest extends AbstractSystemTest {

    private ExploitCounter counter;

    @Override
    public void setUp() {
        super.setUp();
        new ExploitSystem(world);
        counter = new ExploitCounter(world);
    }

    @Test
    public void testUpdate_noExposure_noExploits() {
        givenACompanyWithZeroExposure();
        whenEnoughTimeElapsesThatAnExploitCouldHaveBeenGenerated();
        thenThereAreNoExploits();
    }

    private void whenEnoughTimeElapsesThatAnExploitCouldHaveBeenGenerated() {
        whenOneDayOfGameTimeElapses();
    }

    private void givenACompanyWithZeroExposure() {
        world.exposure.update(0f);
    }

    private void thenThereAreNoExploits() {
        assertEquals(0, counter.count);
    }

    @Test
    public void testUpdate_fullExposure_someExploits() {
        givenACompanyWithCompleteExposure();
        whenEnoughTimeElapsesThatAnExploitCouldHaveBeenGenerated();
        thenThereAreSomeExploits();
    }

    private void thenThereAreSomeExploits() {
        assertTrue(counter.count > 0);
    }

    private void givenACompanyWithCompleteExposure() {
        world.exposure.update(1.0f);
    }

    @Test
    public void testUpdate_fullExposure_lessThanOneHourElapses_noExploits() {
        givenACompanyWithCompleteExposure();
        whenSecondsOfGameTimeElapse(ClockUtils.SECONDS_PER_HOUR - 1);
        thenThereAreNoExploits();
    }

    @Test
    public void testUpdate_fullExposure_TwoHourElapses_twoExploits() {
        givenACompanyWithCompleteExposure();
        whenOneHourOfGameTimeElapses();
        whenOneHourOfGameTimeElapses();
        thenThereAreExploits(2);
    }

    private void thenThereAreExploits(int howMany) {
        checkState(counter != null);
        assertEquals(howMany, counter.count);
    }

    @Test
    public void testUpdate_exploitedSystem_usersAreReduced() {
        final float usersBeforeExploit = 1000;
        givenACompanyWithCompleteExposure();
        givenACompanyWithUsers(usersBeforeExploit);
        whenAnExploitOccurs();
        assertTrue(world.users.get() < usersBeforeExploit);
    }

    private void givenACompanyWithUsers(float usersBeforeExploit) {
        world.users.update(usersBeforeExploit);
    }

    private void whenAnExploitOccurs() {
        whenOneHourOfGameTimeElapses();
        Assume.assumeTrue(counter.count > 0);
    }

    @Test
    public void testUpdate_exploitedSystem_exploitRecordsLostUsers() {
        final int usersBeforeExploit = 1000;
        givenACompanyWithCompleteExposure();
        givenACompanyWithUsers(usersBeforeExploit);
        whenAnExploitOccurs();
        final int difference = usersBeforeExploit - world.users.get().intValue();
        Entity exploit = counter.capture;
        checkNotNull(exploit, "No exploit was captured");
        checkState(exploit.has(world.lostUsers), "Missing lostUsers component");
        assertEquals(difference, world.lostUsers.get(exploit.id));
    }

    private final class ExploitCounter extends tripleplay.entity.System {
        private final GameWorld world;

        int count = 0;
        Entity capture;

        public ExploitCounter(GameWorld world) {
            super(world, 0);
            this.world = world;
        }

        @Override
        protected boolean isInterested(Entity entity) {
            return entity.has(world.exploitNumber);
        }

        @Override
        protected void update(Clock clock, Entities entities) {
            super.update(clock, entities);
            count = entities.size();
            if (entities.size() > 0) {
                capture = world.entity(entities.get(0));
            }
        }
    }


}
