/*
 * Copyright 2015 Paul Gestwicki
 *
 * This file is part of The Social Startup Game
 *
 * The Social Startup Game is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Social Startup Game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Social Startup Game.  If not, see <http://www.gnu.org/licenses/>.
 */

package edu.bsu.cybersec.core;

import org.junit.Test;
import tripleplay.entity.Entity;

import static org.junit.Assert.assertEquals;

public class VulnerabilitySystemTest extends AbstractSystemTest {

    private static final float VULNERABILITY = 1.0f;

    @Override
    public void setUp() {
        super.setUp();
        new VulnerabilitySystem(world);
    }

    @Test
    public void testUpdate_noVulnerabilities_noExposure() {
        advancePlayNClockOneSecond();
        assertExposureIs(0);
    }

    private void assertExposureIs(float expected) {
        assertEquals(expected, world.exposure.get(), EPSILON);
    }

    @Test
    public void testUpdate_oneActiveVulnerability_exposureEqualsVulnerability() {
        createVulnerability(true);
        advancePlayNClockOneSecond();
        assertExposureIs(VULNERABILITY);
    }

    private Entity createVulnerability(boolean isVulnerabilityActive) {
        Entity e = world.create(true).add(world.vulnerability, world.vulnerabilityState);
        world.vulnerability.set(e.id, VULNERABILITY);
        world.vulnerabilityState.set(e.id, isVulnerabilityActive ?
                VulnerabilityState.ACTIVE.value : VulnerabilityState.INACTIVE.value);
        return e;
    }

    @Test
    public void testUpdate_oneInactiveVulnerability_noExposure() {
        createVulnerability(false);
        advancePlayNClockOneSecond();
        assertExposureIs(0);
    }
}
