/*
 * Copyright 2015 Paul Gestwicki
 *
 * This file is part of The Social Startup Game
 *
 * The Social Startup Game is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Social Startup Game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Social Startup Game.  If not, see <http://www.gnu.org/licenses/>.
 */

package edu.bsu.cybersec.core.systems;

import org.junit.Test;
import tripleplay.entity.Entity;

import static org.junit.Assert.*;

public class ExploitMaintenanceSystemTest extends AbstractSystemTest {

    private static final float MAINTAINER_SKILL = 5;

    @Override
    public void setUp() {
        super.setUp();
        new ExploitMaintenanceSystem(world);
    }

    @Test
    public void testUpdate_oneExploitAndOneMaintainer_progressIncreases() {
        givenAnActiveMaintainer();
        Entity exploit = givenOneExploit();
        float initialProgress = world.maintenanceProgress.get(exploit.id);
        whenOneHourOfGameTimeElapses();
        float afterProgress = world.maintenanceProgress.get(exploit.id);
        assertTrue(String.format("%f should be greater than %f", afterProgress, initialProgress), afterProgress > initialProgress);
    }

    private void givenAnActiveMaintainer() {
        Entity worker = world.create(true).add(world.task, world.maintenanceSkill);
        world.task.set(worker.id, world.maintenanceTaskId);
        world.maintenanceSkill.set(worker.id, MAINTAINER_SKILL);
    }

    private Entity givenOneExploit() {
        return world.create(true).add(world.exploitNumber, world.maintenanceProgress);
    }

    @Test
    public void testUpdate_rate() {
        givenAnActiveMaintainer();
        Entity exploit = givenOneExploit();
        whenOneHourOfGameTimeElapses();
        float afterProgress = world.maintenanceProgress.get(exploit.id);
        assertEquals(ExploitMaintenanceSystem.DEFAULT_PROGRESS_PER_HOUR_PER_MAINTENANCE_SKILL_POINT * MAINTAINER_SKILL, afterProgress, EPSILON);
    }

    @Test
    public void testUpdate_attritionRemovedWhenFixed() {
        givenAnActiveMaintainer();
        Entity exploit = givenOneExploit();
        exploit.add(world.userAttrition);
        world.maintenanceProgress.set(exploit.id, 0.999f);
        whenOneHourOfGameTimeElapses();
        assertFalse(exploit.has(world.userAttrition));
    }
}
